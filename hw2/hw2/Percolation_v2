package hw2;

import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class Percolation {
    private int scale;
    private int numofOpenSites;
    private int topSite;
    private int bottomSite;
    private Boolean[] Grid;
    private WeightedQuickUnionUF weightedQuickUnionUF;

    public Percolation(int N){
        if(N <= 0){
            throw new IllegalArgumentException("N is invalid");
        }

        scale = N;
        Grid = new Boolean[N*N];
        weightedQuickUnionUF = new WeightedQuickUnionUF(N*N + 2);
        topSite = N*N;
        bottomSite = N*N + 1;

        for(int i = 0; i < N*N; i ++){
            Grid[i] = false;
        }

    }


    private int xyTo1D(int r, int c){
        return r*scale + c;
    }

    private boolean isValid(int r, int c){
        if(r >= 0 && r < scale && c >= 0 && c < scale){
            return true;
        }

        return false;
    }

    public void open(int row, int col) {
        if(!isValid(row,col)){
            throw new IllegalArgumentException("Row or Column number is invalid");
        }

        if(isOpen(row,col)) {return;}; // do nothing

        Grid[xyTo1D(row,col)] = true;

        numofOpenSites ++;

        if(row == 0){
            weightedQuickUnionUF.union(xyTo1D(row,col), topSite);
        }

        if(row == scale - 1){
            weightedQuickUnionUF.union(xyTo1D(row,col), bottomSite);
        }

        if(row > 0 && isOpen(row - 1,col)){
            // above
            weightedQuickUnionUF.union(xyTo1D(row,col), xyTo1D(row - 1,col));
        }

        if(row < scale - 1 && isOpen(row + 1,col)){
            // below
            weightedQuickUnionUF.union(xyTo1D(row,col), xyTo1D(row + 1,col));
        }

        if(col > 0 && isOpen(row,col - 1)){
            // left
            weightedQuickUnionUF.union(xyTo1D(row,col), xyTo1D(row,col- 1));
        }

        if(col < scale - 1 && isOpen(row,col + 1)){
            // right
            weightedQuickUnionUF.union(xyTo1D(row,col), xyTo1D(row,col + 1));
        }

    }


    public boolean isOpen(int row, int col){
        if(!isValid(row,col)){
            throw new IllegalArgumentException("Row or Column number is invalid");
        }
        return Grid[xyTo1D(row,col)];
    }


    public boolean isFull(int row, int col){
        return weightedQuickUnionUF.connected(xyTo1D(row,col),topSite);
    }


    public int numberOfOpenSites(){
        return numofOpenSites;
    }           // number of open sites


    public boolean percolates(){
        return weightedQuickUnionUF.connected(topSite,bottomSite);
    }              // does the system percolate?


    public static void main(String[] args){
        Percolation percolation = new Percolation(5);
        percolation.open(0,2);
        percolation.open(1,2);
        percolation.open(2,2);
        percolation.open(1,3);
        percolation.open(2,3);
        percolation.open(3,3);
        percolation.open(4,3);

        System.out.println(percolation.percolates());
        System.out.println(percolation.numberOfOpenSites());
        System.out.println(percolation.isFull(1,3));
    }

}
