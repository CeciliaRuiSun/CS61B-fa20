package bearmaps;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.NoSuchElementException;

public class ArrayHeapMinPQ<T extends Comparable<T>> implements ExtrinsicMinPQ<T> {
    //private List<Node>[] keys;
    private Node[] keys;
    private int initialSize = 16;
    private final int multiFactor = 2;
    private int size;
    private HashMap<T,Integer> hm;

    public ArrayHeapMinPQ(){
       // keys = (List<Node>[]) new ArrayList[initialSize];
        keys = (Node[]) new Object[initialSize];
        hm = new HashMap<>();
        size = 0;
    }

    private class Node{
        T item;
        double priority;

        public Node(T t, double p){
            this.item = t;
            this.priority = p;
        }
    }

    @Override
    public void add(T item, double priority){
        if(hm.containsKey(item)){
            throw new IllegalArgumentException("Item already exists.");
        }

        if(size == keys.length){
            keys = resize(keys);
        }

        keys[size] = new Node(item, priority); // add new node as the last item of array
        swimup(keys[size]);
        size ++;
    }

    private Node[] resize(Node[] items){
        Node[] ret = (Node[]) new Object[items.length*multiFactor];
        for(int i = 0; i < items.length; i ++){
            ret[i] = items[i];
        }
        return ret;
    }

    private int parent(int index){
        return (index - 1)/2;
    }

    private int leftChild(int index){
        return 2*index+1;
    }

    private int rightChild(int index){
        return 2*index+2;
    }


    @Override
    public boolean contains(T item){
        return hm.containsKey(item);
    }

    @Override
    public T getSmallest(){
        if(size == 0){
            throw new NoSuchElementException("Item not Exist");
        }
        return keys[0].item;
    }

    @Override
    public T removeSmallest(){

    }

    @Override
    public int size(){
        return size;
    }

    @Override
    public void changePriority(T item, double priority){
        if(!hm.containsKey(item)){
            throw new NoSuchElementException("Item not Exist");
        }

        double oldPriority = getPriority(item);
        int curIndex = hm.get(item);

        if(priority == oldPriority){
            // do nothing
        } else if(priority > oldPriority){
            // swap node with leftchild or rightchild whichever's priority is bigger
            sink(keys[curIndex]);
        } else{
            // swap node with parent node
            swimup(keys[curIndex]);
        }
    }

    private double getPriority(T item){
        // given an item, return its priority;
        return keys[hm.get(item)].priority;
    }

    private int getIndex(Node N){
        // get a node's index in array keys;
        return hm.get(N.item);
    }

    private int Compares(Node a, Node b){
        // return -1 if Node a's priority smaller than Node b's
        //  1 if a is bigger than b
        //  0 if equal

        if(a.priority < b.priority){
            return -1;
        } else if(a.priority > b.priority){
            return 1;
        } else{
            return 0;
        }
    }


    private void sink(Node N){
        int curIndex = hm.get(N.item);
        int left = leftChild(curIndex);
        int right = rightChild(curIndex);

        while(left < size && keys[left].priority < N.priority || (right < size && keys[right].priority < N.priority)) {
            if (right < size) {
                // node has both left and right child
                int compare = Compares(keys[left], keys[right]);
                Node swapChild = null;
                if (compare == -1) {
                    swapChild = keys[right];
                } else {
                    swapChild = keys[left];
                }
                swap(keys[curIndex], swapChild);
                curIndex = hm.get(swapChild.item);
            } else if (left < size) {
                // node only has left child
                swap(keys[curIndex], keys[left]);
                curIndex = left;
            } else {
                // do nothing since no left or right child
            }

            left = leftChild(curIndex);
            right = rightChild(curIndex);
        }
    }

    private void swimup(Node N){
        int indexN = getIndex(N);
        int indexP = parent(indexN);

        while(indexP >= 0 && keys[indexP].priority > keys[indexN].priority){
            swap(keys[indexN],keys[indexP]);
            indexN = indexP;
            indexP = parent(indexN);
        }

    }

    private void swap(Node N, Node Parent){
        int indexN = getIndex(N);
        int indexP = getIndex(Parent);

        Node temp = N;
        keys[indexN] = Parent;
        keys[indexP] = temp;

        hm.put(Parent.item,indexN);   //update hashmap
        hm.put(N.item,indexP);   //update hashmap
    }
}
